// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STUDENT_PERSON_SCHOLAR_H_
#define FLATBUFFERS_GENERATED_STUDENT_PERSON_SCHOLAR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

namespace Person {
namespace Scholar {

struct Student;
struct StudentBuilder;

struct Student FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StudentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_STUDENT_NO = 6,
    VT_DOB = 8,
    VT_COURSES = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *student_no() const {
    return GetPointer<const flatbuffers::String *>(VT_STUDENT_NO);
  }
  const flatbuffers::String *dob() const {
    return GetPointer<const flatbuffers::String *>(VT_DOB);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *courses() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_COURSES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_STUDENT_NO) &&
           verifier.VerifyString(student_no()) &&
           VerifyOffset(verifier, VT_DOB) &&
           verifier.VerifyString(dob()) &&
           VerifyOffset(verifier, VT_COURSES) &&
           verifier.VerifyVector(courses()) &&
           verifier.VerifyVectorOfStrings(courses()) &&
           verifier.EndTable();
  }
};

struct StudentBuilder {
  typedef Student Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Student::VT_NAME, name);
  }
  void add_student_no(flatbuffers::Offset<flatbuffers::String> student_no) {
    fbb_.AddOffset(Student::VT_STUDENT_NO, student_no);
  }
  void add_dob(flatbuffers::Offset<flatbuffers::String> dob) {
    fbb_.AddOffset(Student::VT_DOB, dob);
  }
  void add_courses(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> courses) {
    fbb_.AddOffset(Student::VT_COURSES, courses);
  }
  explicit StudentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Student> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Student>(end);
    return o;
  }
};

inline flatbuffers::Offset<Student> CreateStudent(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> student_no = 0,
    flatbuffers::Offset<flatbuffers::String> dob = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> courses = 0) {
  StudentBuilder builder_(_fbb);
  builder_.add_courses(courses);
  builder_.add_dob(dob);
  builder_.add_student_no(student_no);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Student> CreateStudentDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *student_no = nullptr,
    const char *dob = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *courses = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto student_no__ = student_no ? _fbb.CreateString(student_no) : 0;
  auto dob__ = dob ? _fbb.CreateString(dob) : 0;
  auto courses__ = courses ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*courses) : 0;
  return Person::Scholar::CreateStudent(
      _fbb,
      name__,
      student_no__,
      dob__,
      courses__);
}

inline const Person::Scholar::Student *GetStudent(const void *buf) {
  return flatbuffers::GetRoot<Person::Scholar::Student>(buf);
}

inline const Person::Scholar::Student *GetSizePrefixedStudent(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Person::Scholar::Student>(buf);
}

inline bool VerifyStudentBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Person::Scholar::Student>(nullptr);
}

inline bool VerifySizePrefixedStudentBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Person::Scholar::Student>(nullptr);
}

inline void FinishStudentBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Person::Scholar::Student> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStudentBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Person::Scholar::Student> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Scholar
}  // namespace Person

#endif  // FLATBUFFERS_GENERATED_STUDENT_PERSON_SCHOLAR_H_
