// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESPONSE_WORKPACKAGE_RESPONSE_H_
#define FLATBUFFERS_GENERATED_RESPONSE_WORKPACKAGE_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

namespace workpackage {
namespace response {

struct ScalarResponse;
struct ScalarResponseBuilder;

struct MatrixResponse;
struct MatrixResponseBuilder;

enum Reponse : uint8_t {
  Reponse_NONE = 0,
  Reponse_ScalarResponse = 1,
  Reponse_MatrixResponse = 2,
  Reponse_MIN = Reponse_NONE,
  Reponse_MAX = Reponse_MatrixResponse
};

inline const Reponse (&EnumValuesReponse())[3] {
  static const Reponse values[] = {
    Reponse_NONE,
    Reponse_ScalarResponse,
    Reponse_MatrixResponse
  };
  return values;
}

inline const char * const *EnumNamesReponse() {
  static const char * const names[4] = {
    "NONE",
    "ScalarResponse",
    "MatrixResponse",
    nullptr
  };
  return names;
}

inline const char *EnumNameReponse(Reponse e) {
  if (flatbuffers::IsOutRange(e, Reponse_NONE, Reponse_MatrixResponse)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesReponse()[index];
}

template<typename T> struct ReponseTraits {
  static const Reponse enum_value = Reponse_NONE;
};

template<> struct ReponseTraits<workpackage::response::ScalarResponse> {
  static const Reponse enum_value = Reponse_ScalarResponse;
};

template<> struct ReponseTraits<workpackage::response::MatrixResponse> {
  static const Reponse enum_value = Reponse_MatrixResponse;
};

bool VerifyReponse(flatbuffers::Verifier &verifier, const void *obj, Reponse type);
bool VerifyReponseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct ScalarResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ScalarResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESPONSE = 4
  };
  float response() const {
    return GetField<float>(VT_RESPONSE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_RESPONSE, 4) &&
           verifier.EndTable();
  }
};

struct ScalarResponseBuilder {
  typedef ScalarResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_response(float response) {
    fbb_.AddElement<float>(ScalarResponse::VT_RESPONSE, response, 0.0f);
  }
  explicit ScalarResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ScalarResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ScalarResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScalarResponse> CreateScalarResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    float response = 0.0f) {
  ScalarResponseBuilder builder_(_fbb);
  builder_.add_response(response);
  return builder_.Finish();
}

struct MatrixResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MatrixResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESPONSE_TYPE = 4,
    VT_RESPONSE = 6
  };
  workpackage::common::Matrix response_type() const {
    return static_cast<workpackage::common::Matrix>(GetField<uint8_t>(VT_RESPONSE_TYPE, 0));
  }
  const void *response() const {
    return GetPointer<const void *>(VT_RESPONSE);
  }
  template<typename T> const T *response_as() const;
  const workpackage::common::Matrix2D *response_as_Matrix2D() const {
    return response_type() == workpackage::common::Matrix_Matrix2D ? static_cast<const workpackage::common::Matrix2D *>(response()) : nullptr;
  }
  const workpackage::common::Matrix3D *response_as_Matrix3D() const {
    return response_type() == workpackage::common::Matrix_Matrix3D ? static_cast<const workpackage::common::Matrix3D *>(response()) : nullptr;
  }
  const workpackage::common::MatrixND *response_as_MatrixND() const {
    return response_type() == workpackage::common::Matrix_MatrixND ? static_cast<const workpackage::common::MatrixND *>(response()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_RESPONSE_TYPE, 1) &&
           VerifyOffset(verifier, VT_RESPONSE) &&
           VerifyMatrix(verifier, response(), response_type()) &&
           verifier.EndTable();
  }
};

template<> inline const workpackage::common::Matrix2D *MatrixResponse::response_as<workpackage::common::Matrix2D>() const {
  return response_as_Matrix2D();
}

template<> inline const workpackage::common::Matrix3D *MatrixResponse::response_as<workpackage::common::Matrix3D>() const {
  return response_as_Matrix3D();
}

template<> inline const workpackage::common::MatrixND *MatrixResponse::response_as<workpackage::common::MatrixND>() const {
  return response_as_MatrixND();
}

struct MatrixResponseBuilder {
  typedef MatrixResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_response_type(workpackage::common::Matrix response_type) {
    fbb_.AddElement<uint8_t>(MatrixResponse::VT_RESPONSE_TYPE, static_cast<uint8_t>(response_type), 0);
  }
  void add_response(flatbuffers::Offset<void> response) {
    fbb_.AddOffset(MatrixResponse::VT_RESPONSE, response);
  }
  explicit MatrixResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MatrixResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MatrixResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<MatrixResponse> CreateMatrixResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    workpackage::common::Matrix response_type = workpackage::common::Matrix_NONE,
    flatbuffers::Offset<void> response = 0) {
  MatrixResponseBuilder builder_(_fbb);
  builder_.add_response(response);
  builder_.add_response_type(response_type);
  return builder_.Finish();
}

inline bool VerifyReponse(flatbuffers::Verifier &verifier, const void *obj, Reponse type) {
  switch (type) {
    case Reponse_NONE: {
      return true;
    }
    case Reponse_ScalarResponse: {
      auto ptr = reinterpret_cast<const workpackage::response::ScalarResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Reponse_MatrixResponse: {
      auto ptr = reinterpret_cast<const workpackage::response::MatrixResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyReponseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyReponse(
        verifier,  values->Get(i), types->GetEnum<Reponse>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace response
}  // namespace workpackage

#endif  // FLATBUFFERS_GENERATED_RESPONSE_WORKPACKAGE_RESPONSE_H_
