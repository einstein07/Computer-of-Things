# automatically generated by the FlatBuffers compiler, do not modify

# namespace: workpackage

import flatbuffers

class WorkpackageResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWorkpackageResponse(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorkpackageResponse()
        x.Init(buf, n + offset)
        return x

    # WorkpackageResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorkpackageResponse
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorkpackageResponse
    def ResponseType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # WorkpackageResponse
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def WorkpackageResponseStart(builder): builder.StartObject(3)
def WorkpackageResponseAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def WorkpackageResponseAddResponseType(builder, responseType): builder.PrependUint8Slot(1, responseType, 0)
def WorkpackageResponseAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def WorkpackageResponseEnd(builder): return builder.EndObject()
