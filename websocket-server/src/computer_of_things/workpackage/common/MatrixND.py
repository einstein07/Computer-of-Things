# automatically generated by the FlatBuffers compiler, do not modify

# namespace: common

import flatbuffers

class MatrixND(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMatrixND(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MatrixND()
        x.Init(buf, n + offset)
        return x

    # MatrixND
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MatrixND
    def NumDims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MatrixND
    def DimSizes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MatrixND
    def DimSizesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MatrixND
    def DimSizesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MatrixND
    def Elements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MatrixND
    def ElementsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # MatrixND
    def ElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def MatrixNDStart(builder): builder.StartObject(3)
def MatrixNDAddNumDims(builder, numDims): builder.PrependInt32Slot(0, numDims, 0)
def MatrixNDAddDimSizes(builder, dimSizes): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dimSizes), 0)
def MatrixNDStartDimSizesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MatrixNDAddElements(builder, elements): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(elements), 0)
def MatrixNDStartElementsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MatrixNDEnd(builder): return builder.EndObject()
