# automatically generated by the FlatBuffers compiler, do not modify

# namespace: common

import flatbuffers

class Matrix2D(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMatrix2D(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Matrix2D()
        x.Init(buf, n + offset)
        return x

    # Matrix2D
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Matrix2D
    def NRows(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Matrix2D
    def NCols(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Matrix2D
    def Elements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Matrix2D
    def ElementsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Matrix2D
    def ElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def Matrix2DStart(builder): builder.StartObject(3)
def Matrix2DAddNRows(builder, nRows): builder.PrependInt32Slot(0, nRows, 0)
def Matrix2DAddNCols(builder, nCols): builder.PrependInt32Slot(1, nCols, 0)
def Matrix2DAddElements(builder, elements): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(elements), 0)
def Matrix2DStartElementsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def Matrix2DEnd(builder): return builder.EndObject()
